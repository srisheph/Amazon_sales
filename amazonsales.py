# -*- coding: utf-8 -*-
"""AmazonSales.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JBNI0k8GOjoXM-3hUnVcwdRNdfm61c8a
"""

# Data handling libraries
import pandas as pd
import numpy as np

# Visualization libraries
import seaborn as sns
import matplotlib.pyplot as plt

# Preprocessing libraries
from sklearn.preprocessing import LabelEncoder, MinMaxScaler

# Machine Learning models
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor

# Metrics
from sklearn.metrics import mean_squared_error, r2_score

# Load the dataset
df = pd.read_csv('/content/amazon.csv',low_memory=False)  # replace with your actual filename
df.head()

df.tail()

df.info()

df.describe()

df.duplicated().sum()

df.sample(15)

df.shape

df.columns

"""##Organizing Columns"""

df = df.drop(["about_product","review_content",'review_title','img_link','product_link','review_id','product_id','user_name','user_id' ],axis = 1)
df.head()

"""##Creating new Columns"""

df['product_type'] = df['category'].str.split("|").str.get(-1)

df.head()

df['category'] = df['category'].str.split("|").str.get(0)

df.head()

df["discounted_price"] = df["discounted_price"].apply(lambda x : x.replace("₹",""))
df["actual_price"] =  df["actual_price"].apply(lambda x : x.replace("₹",""))

df["discounted_price"] = df["discounted_price"].apply(lambda x : x.replace(",","."))
df["actual_price"] =  df["actual_price"].apply(lambda x : x.replace(",","."))

df

df['id'] = df.index

df

"""##Column Discounted Price"""

df[df.discounted_price == '3.657.66']

df.discounted_price = df.discounted_price.str.split(".").str.get(0) +"."+ df.discounted_price.str.split(".").str.get(1).fillna("0")

df.head()

df.discounted_price = df.discounted_price.astype(float)

"""##Column Actual price"""

df.actual_price = df.actual_price.str.split(".").str.get(0) +"."+ df.actual_price.str.split(".").str.get(1).fillna("0")

df.actual_price = df.actual_price.astype(float)

"""##Column Rating"""

df.rating = df.rating.apply(lambda x : x.replace("|", "NaN" ))

df['rating'] = df['rating'].apply(lambda x: x.replace(",", "."))

df.rating = df.rating.astype(float)

"""##Column rating_count"""

df.rating_count = df.rating_count.str.split(".").str.get(0) +"."+ df.rating_count.str.split(".").str.get(1).fillna("0")

df['rating_count'] = df['rating_count'].apply(lambda x: x.replace(",", ".") if isinstance(x, str) else x)

df.rating_count = df.rating_count.astype(float)

df.dtypes

df.rating_count.describe()

"""##Creating mean_of_ratings column with cut() function"""

df['mean_of_ratings'] = pd.cut(df['rating'], [1,2,4,5], labels = ['Poor','Average','Good'])

df.head()

"""##NaN values"""

df.isnull().sum()

df = df.dropna()

df.isnull().sum()

df.shape

df.dtypes

df.describe()

df.category.nunique()

df.category.unique()

df.product_type.nunique()

df.product_type.unique()

df.rating.mean()

cat_cols = [col for col in df.columns if str(df[col].dtypes) in ["object", "category", "bool"]]

num_but_cat = [col for col in df.columns if df[col].nunique() < 10 and df[col].dtypes in ["int64", "float"]]

cat_but_car = [col for col in df.columns if df[col].nunique() > 250 and str(df[col].dtypes) in ["object", "category", "bool"]]

cat_cols = [col for col in cat_cols if "percentage" not in col and "rate" not in col and "ratio" not in col]

cat_cols = cat_cols + num_but_cat

cat_cols = [col for col in cat_cols if col not in cat_but_car]

cat_cols

# Function to get summary information for specified categorical columns
def cat_summary(dataframe, col_name):
    print(pd.DataFrame({
        col_name: dataframe[col_name].value_counts(),  # Count of unique values
        "Ratio": 100 * dataframe[col_name].value_counts() / len(dataframe)  # Percentage of each unique value
    }))
    print("------------------------------------------------------------------")

for col in cat_cols:
    cat_summary(df, col)

df.head()

"""##Data Visualization

###Number of Products per Category
"""

plt.figure(figsize=(7,5))
ax = sns.countplot(data=df, x='category' ,palette = "tab10")
plt.title('Number of Products per Category')
plt.xlabel('Category')
plt.ylabel('Product Count')
plt.xticks(rotation=90)
for p in ax.patches:
    ax.annotate(format(p.get_height(), '.0f'),
                (p.get_x() + p.get_width() / 2., p.get_height()),
                ha = 'center', va = 'center',
                xytext = (0, 9),
                textcoords = 'offset points')

plt.show()

"""##Understanding if there is a relationship between discounted prices and ratings"""

sns.scatterplot(x='rating',y='discounted_price', data= df, color = "green")
plt.title("discounted_price & rating")
plt.show()

"""###Ratings Distribution"""

product_count = df.groupby('mean_of_ratings').size().reset_index(name = "count")
product_count

sns.countplot(x='mean_of_ratings', data=df, palette = "tab10")
plt.title("ratings Distribution")
for index, value in enumerate(product_count['count']):
    plt.text(index, value + 2, str(value), ha='center')
plt.show()

sns.displot(x="rating", data = df, kde = True);

"""###Number of most sold 10 product"""

most_sold = df['product_type'].value_counts().sort_values(ascending=False)[0:10]
most_sold

filtered_df = df[df.product_type.isin(most_sold.index)]
filtered_df.groupby('product_type')['discounted_price'].mean().reset_index(name='mean_of_dprice')

fig, ax = plt.subplots(figsize=(4, 6))
ax.pie(most_sold.values, labels=most_sold.index, autopct='%1.1f%%', startangle=90,
       shadow = True, textprops={'fontsize': 8},)


ax.set_title('Number of most sold 10 product', fontsize=10, fontweight='bold')
ax.axis('equal')

plt.show()

"""###Sales Prices by Product Categories"""

plt.figure(figsize=(8, 6))
sns.boxplot(x='product_type', y='discounted_price', data=filtered_df, palette='tab10')
plt.title("Sales Prices by Product Categories")
plt.xticks(rotation=90)
plt.xlabel("Product Category")
plt.ylabel("Sales Price")
plt.show()